services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: saarsinistre-app
    restart: unless-stopped
    working_dir: /var/www/html
    volumes:
      - ./:/var/www/html
      - ./docker/php/local.ini:/usr/local/etc/php/conf.d/local.ini
      # Volume séparé pour les uploads en production
      - storage_data:/var/www/html/storage/app/public
    ports:
      - "8000:80"
      - "8080:8080"  # Port pour Reverb WebSockets
    environment:
      - APP_ENV=production
      - APP_DEBUG=false
      - APP_URL=http://localhost:8000
      # Variables pour la santé des conteneurs
      - CONTAINER_ROLE=app
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - saarsinistre-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Worker séparé pour les tâches background
  queue-worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: saarsinistre-queue
    restart: unless-stopped
    working_dir: /var/www/html
    volumes:
      - ./:/var/www/html
      - storage_data:/var/www/html/storage/app/public
    command: php artisan queue:work redis --sleep=3 --tries=3 --timeout=90 --memory=128
    environment:
      - APP_ENV=production
      - CONTAINER_ROLE=queue
    depends_on:
      - app
      - redis
    networks:
      - saarsinistre-network

  db:
    image: mysql:8.0
    container_name: saarsinistre-db
    restart: unless-stopped
    environment:
      MYSQL_DATABASE: saarsinistre
      MYSQL_ROOT_PASSWORD: root_password
      MYSQL_USER: saarsinistre_user
      MYSQL_PASSWORD: saarsinistre_password
    volumes:
      - db_data:/var/lib/mysql
      - ./docker/mysql/my.cnf:/etc/mysql/my.cnf
      # Script d'initialisation si nécessaire
      - ./docker/mysql/init:/docker-entrypoint-initdb.d
    ports:
      - "3306:3306"
    networks:
      - saarsinistre-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  redis:
    image: redis:7-alpine
    container_name: saarsinistre-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - saarsinistre-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # Nginx comme reverse proxy (optionnel)
  nginx:
    image: nginx:alpine
    container_name: saarsinistre-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./:/var/www/html
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ./docker/nginx/ssl:/etc/nginx/ssl
      - storage_data:/var/www/html/storage/app/public
    depends_on:
      - app
    networks:
      - saarsinistre-network

  # Service pour les tâches de maintenance (optionnel)
  scheduler:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: saarsinistre-scheduler
    restart: unless-stopped
    working_dir: /var/www/html
    volumes:
      - ./:/var/www/html
      - storage_data:/var/www/html/storage/app/public
    command: /bin/bash -c "while [ true ]; do (php artisan schedule:run --verbose --no-interaction &); sleep 60; done"
    environment:
      - APP_ENV=production
      - CONTAINER_ROLE=scheduler
    depends_on:
      - app
    networks:
      - saarsinistre-network

volumes:
  db_data:
    driver: local
  redis_data:
    driver: local
  storage_data:
    driver: local

networks:
  saarsinistre-network:
    driver: bridge