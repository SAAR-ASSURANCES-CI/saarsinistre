#!/bin/bash

# Configuration
IMAGE_NAME="saarsinistre"
DOCKER_HUB_USERNAME="xdcondor" 
VERSION="latest"

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' 

echo -e "${BLUE}=== Construction de l'image Docker pour Saar Sinistre ===${NC}"

# V√©rification que Docker est en cours d'ex√©cution
if ! docker info > /dev/null 2>&1; then
    echo -e "${RED}‚úó Erreur: Docker n'est pas en cours d'ex√©cution${NC}"
    exit 1
fi

# Nettoyage pr√©alable des liens symboliques probl√©matiques
echo -e "${YELLOW}üßπ Nettoyage des fichiers probl√©matiques...${NC}"
if [ -L "public/storage" ]; then
    echo "Suppression du lien symbolique public/storage"
    rm -f public/storage
fi

# Cr√©ation des r√©pertoires n√©cessaires
mkdir -p storage/app/public
mkdir -p storage/logs
mkdir -p storage/framework/cache
mkdir -p storage/framework/sessions
mkdir -p storage/framework/views
mkdir -p bootstrap/cache

# V√©rification des fichiers essentiels
if [ ! -f "composer.json" ]; then
    echo -e "${RED}‚úó Erreur: composer.json non trouv√©${NC}"
    exit 1
fi

if [ ! -f "package.json" ]; then
    echo -e "${RED}‚úó Erreur: package.json non trouv√©${NC}"
    exit 1
fi

# Construction de l'image Docker
echo -e "${YELLOW}üî® Construction de l'image Docker...${NC}"
docker build \
    --no-cache \
    --progress=plain \
    -t ${IMAGE_NAME}:${VERSION} \
    .

if [ $? -eq 0 ]; then
    echo -e "${GREEN}‚úì Image construite avec succ√®s${NC}"
    
    # Affichage de la taille de l'image
    IMAGE_SIZE=$(docker images ${IMAGE_NAME}:${VERSION} --format "table {{.Size}}" | tail -1)
    echo -e "${BLUE}üì¶ Taille de l'image: ${IMAGE_SIZE}${NC}"
else
    echo -e "${RED}‚úó Erreur lors de la construction de l'image${NC}"
    echo -e "${YELLOW}üí° Suggestions de d√©bogage:${NC}"
    echo "1. V√©rifiez que tous les fichiers Docker existent (docker/apache/000-default.conf, docker/start.sh)"
    echo "2. V√©rifiez le contenu du .dockerignore"
    echo "3. Essayez de construire avec --no-cache"
    exit 1
fi

# Demander confirmation avant publication
read -p "$(echo -e ${YELLOW}Voulez-vous publier l'image sur Docker Hub? [y/N]: ${NC})" -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    
    # Taggage de l'image pour Docker Hub
    echo -e "${YELLOW}üè∑Ô∏è  Taggage de l'image pour Docker Hub...${NC}"
    docker tag ${IMAGE_NAME}:${VERSION} ${DOCKER_HUB_USERNAME}/${IMAGE_NAME}:${VERSION}
    docker tag ${IMAGE_NAME}:${VERSION} ${DOCKER_HUB_USERNAME}/${IMAGE_NAME}:latest

    # Connexion √† Docker Hub
    echo -e "${YELLOW}üîê Connexion √† Docker Hub...${NC}"
    docker login

    if [ $? -eq 0 ]; then
        echo -e "${GREEN}‚úì Connexion r√©ussie${NC}"
    else
        echo -e "${RED}‚úó Erreur de connexion √† Docker Hub${NC}"
        exit 1
    fi

    # Publication de l'image sur Docker Hub
    echo -e "${YELLOW}üì§ Publication de l'image sur Docker Hub...${NC}"
    docker push ${DOCKER_HUB_USERNAME}/${IMAGE_NAME}:${VERSION}
    docker push ${DOCKER_HUB_USERNAME}/${IMAGE_NAME}:latest

    if [ $? -eq 0 ]; then
        echo -e "${GREEN}‚úì Image publi√©e avec succ√®s sur Docker Hub${NC}"
        echo -e "${GREEN}üåê Votre image est disponible √†: https://hub.docker.com/r/${DOCKER_HUB_USERNAME}/${IMAGE_NAME}${NC}"
    else
        echo -e "${RED}‚úó Erreur lors de la publication${NC}"
        exit 1
    fi
else
    echo -e "${BLUE}‚ÑπÔ∏è  Image cr√©√©e localement seulement${NC}"
fi

# Test de l'image
echo -e "${YELLOW}üß™ Voulez-vous tester l'image localement? [y/N]: ${NC}"
read -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    echo -e "${YELLOW}üöÄ D√©marrage d'un conteneur de test...${NC}"
    docker run --rm -d -p 8080:80 --name saarsinistre-test ${IMAGE_NAME}:${VERSION}
    
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}‚úì Conteneur de test d√©marr√©${NC}"
        echo -e "${BLUE}üåç Acc√©dez √† votre application sur: http://localhost:8080${NC}"
        echo -e "${YELLOW}‚èπÔ∏è  Pour arr√™ter le test: docker stop saarsinistre-test${NC}"
    else
        echo -e "${RED}‚úó Erreur lors du d√©marrage du conteneur de test${NC}"
    fi
fi

echo -e "${GREEN}üéâ Processus termin√© avec succ√®s${NC}"

# Affichage des commandes utiles
echo -e "${BLUE}üìã Commandes utiles:${NC}"
echo "‚Ä¢ Lancer l'image: docker run -d -p 8080:80 ${IMAGE_NAME}:${VERSION}"
echo "‚Ä¢ Voir les logs: docker logs <container_id>"
echo "‚Ä¢ Entrer dans le conteneur: docker exec -it <container_id> bash"
echo "‚Ä¢ Arr√™ter le conteneur de test: docker stop saarsinistre-test"